'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC',
'FACTOR_CHARACTER','FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER',
'CATEGORY')
connections <- ds.login(login.data, variables = server.var, symbol = 'D')
print(connections)
tables.colnames <- ds.colnames(x = 'D',
datasources = connections)
print("Columns names    : ")
print(tables.colnames)
tables.features  <- ds.dim(x = "D",
type = "split",
datasources = connections)
print("Rows and columns : ")
print(tables.features)
int.mean    <- ds.mean (x = 'D$POSITIVE_INTEGER', type = "split", datasources = connections)
int.var     <- ds.var (x = 'D$POSITIVE_INTEGER', type = "split", datasources = connections)
int.std     <- sqrt(int.var[[1]][,1])
print("Mean")
print(int.mean[[1]])
print("Standard deviation")
print(int.std)
tables.colnames <- ds.colnames(x = 'D',
datasources = connections)
print("Columns names    : ")
print(tables.colnames)
tables.features  <- ds.dim(x = "D",
type = "combined",
datasources = connections)
print("Rows and columns : ")
print(tables.features)
int.mean    <- ds.mean (x = 'D$POSITIVE_INTEGER', type = "combined", datasources = connections)
int.var     <- ds.var (x = 'D$POSITIVE_INTEGER', type = "combined", datasources = connections)
int.std     <- sqrt(int.var[[1]][,1])
print("Mean")
print(int.mean[[1]])
print("Standard deviation")
print(int.std)
#server function header
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connection = connections,
new.variable.name= "rUnifDist",
value = server.function.call,
class.type = "numeric",
asynchronous = FALSE)
print(var.created)
print(ds.class(x = "rUnifDist", datasources = connections))
var.created <- ds.assign.value(connection = connections,
new.variable.name ="rUnifDistB",
value = server.function.call,
class.type = "character",
asynchronous = FALSE)
print(var.created)
print(ds.class(x = "rUnifDistB", datasources = connections))
runif.mean    <- ds.mean (x = 'rUnifDist', type = "split", datasources = connections)
runif.var     <- ds.var (x = 'rUnifDist', type = "split", datasources = connections)
runif.std     <- sqrt(runif.var[[1]][,1])
print("server-level")
print("Mean")
print(runif.mean[[1]])
print("Standard deviation")
print(runif.std)
print("virtually-joined")
runif.mean    <- ds.mean (x = 'rUnifDist', type = "combined", datasources = connections)
runif.var     <- ds.var (x = 'rUnifDist', type = "combined", datasources = connections)
runif.std     <- sqrt(runif.var[[1]][,1])
print("Mean")
print(runif.mean[[1]])
print("Standard deviation")
print(runif.std)
rUnif.exists <- ds.exists.on.server(connection    = connections,
variable.name = "rUnifDist",
class.type    = "numeric")
print(rUnif.exists)
rUnif.exists <- ds.exists.on.server(connection    = connections,
variable.name = "rUnifDistB",
class.type    = "character")
print(rUnif.exists)
outcome <- ds.remove.variable(connections,variable.name = "rUnifDist", class.type = "numeric")
print(outcome)
outcome <- ds.remove.variable(connections,variable.name = "rUnifDistB", class.type = "character")
print(outcome)
devtools::document()
library(dsBaseClient)
?ds.cor
require('DSI')
require('DSOpal')
require('dsBaseClient')
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
?dsAggregate
?ds.aggregate
ds.aggregate(expression = quote(dimDS("D")),
connection =  connections)
?ds.assign.value
ds.colnames("D")
ds.assign.value(connections,"hola", "LAB_TSC","numeric",TRUE)
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
devtools::document()
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
connections
ds.aggregate(expression = quote(dimDS("D")),
datasources = connections)
?ds.aggregate
getwd()
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
?ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
?ds.assign.value(connection = connections, new.variable.name
="hola", value= "D$LAB_TSC",class.type
="numeric",asynchronous=TRUE)
ds.assign.value(connection = connections, new.variable.name
="hola", value= "D$LAB_TSC",class.type
="numeric",asynchronous=TRUE)
?ds.remove.variable
function(connection=connections, variable.name=·"D$LAB_TSC", class.type="numeric")
(connection=connections, variable.name=·"D$LAB_TSC", class.type="numeric")
(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
ds.remove.variable(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
devtools::document()
devtools::document()
ds.remove.variable(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
devtools::document()
ds.remove.variable(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
?ds.aggregate
devtools::document()
ds.remove.variable(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
devtools::document()
ds.remove.variable(connection=connections, variable.name="D$LAB_TSC", class.type="numeric")
?ds.exists.on.server
function(connections=connections, variable.name="D$LAB_TSC", class.type = "numeric")
)
function(connections=connections,variable.name="D$LAB_TSC", class.type = "numeric")
ds.exists.on.server(connections=connections,variable.name="D$LAB_TSC", class.type = "numeric")
ds.colnames("D")
ds.exists.on.server(connections=connections,variable.name="D$LAB_TRIG", class.type = "numeric")
ds.exists.on.server(connections=connections,variable.name="D", class.type = "numeric")
ds.exists.on.server(connections=connections,variable.name="D", class.type = "data.frame")
?ds.exists.on.server(connections=connections,variable.name="D", class.type = "data.frame")
ds.class("D")
?ds.exists.on.server(connections=connections,variable.name="D", class.type = NULL)
ds.exists.on.server(connections=connections,variable.name="D", class.type = NULL)
devtools::document()
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
ds.ls()
ds.class("hola")
?ds.exists.on.server(connections=connections,variable.name="hola", class.type = NULL)
ds.exists.on.server(connections=connections,variable.name="hola", class.type = NULL)
ds.exists.on.server(connections=connections,variable.name="hola", class.type = "numeric")
devtools::document()
devtools::document()
?ds.aggregate
require('DSI')
require('DSOpal')
require('dsBaseClient')
require('ds.client.connection.server')
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
ds.ls()
?ds.remove.variable
devtools::document()
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
ds.remove.variable("hola","numeric",connections)
ds.ls)
ds.ls()
devtools::document()
?ds.exists.on.server
ds.exists.on.server("hola","numeric",connections)
connections
ds.exists.on.server("hola","numeric",connections)
devtools::document()
ds.exists.on.server("hola","numeric",connections)
ds.remove.variable("hola","numeric",connections)
devtools::document()
ds.remove.variable("hola","numeric",connections)
ds.exists.on.server("hola","numeric",connections)
ds.assign.value(connections,"hola", "D$LAB_TSC","numeric",TRUE)
?ds.cor
datashield.logout(connections)
?ds.cor
library(dsBaseClient)
?ds.cor
require('DSI')
require('DSOpal')
require('dsBaseClient')
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
?ds.assign.value
devtools::document(+)
devtools::document()
?ds.assign.value
devtools::document()
?ds.assign.value
devtools::document()
?ds.assign.value
ds.assign.value(new.variable.name = "lab.tsc",
value = "D$LAB_TSC",
class.type = "numeric",
datasources = connections)
ds.ls()
ds.class("lab.tsc")
?ds.remove.variable
devtools::document)
devtools::document())
devtools::document()
?ds.remove.variable
devtools::document()
?ds.remove.variable
devtools::document()
?ds.remove.variable
ds.assign.value(new.variable.name = "lab.tsc",
value = "D$LAB_TSC",
class.type = "numeric",
datasources = connections)
connections
ds.remove.variable <- function(variable.name = NULL, class.type= NULL, datasources = NULL)
{
outcome <- FALSE
tryCatch(
{outcome <- .remove(variable.name, class.type, datasources)},
warning = function(warning) {.warning(warning)},
error = function(error) {ds.error(error)},
finally = {return(outcome)}
)
}
ds.ls()
datashield.logout(connections)
ds.ls()
require('DSI')
require('DSOpal')
require('dsBaseClient')
require('ds.client.connection.server')
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
ds.ls()
ds.assign.value(new.variable.name = "lab.tsc",
value = "D$LAB_TSC",
class.type = "numeric",
datasources = connections)
ds.ls()
ds.class("lab.tsc")
ds.remove.variable(variable.name = "lab.tsc",
class.type = "numeric",
datasources = connections)
?ds.assign.value
?ds.exists.on.server
devtools::document()
?ds.exists.on.server
ds.exists.on.server(variable.name = "lab.tsc",
class.type = "numeric",
datasources = connections)
devtools::document()
?ds.existson.server
?ds.exists.on.server
devtools::document()
?ds.exists.on.server
devtool::document()
devtools::document()
devtools::document()
?ds.build.login.data.frame
devtool::document()
devtools::document()
?ds.build.login.data.frame
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
server.names   <- c("Paris", "Newcastle", "New York")
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
assword_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
password_Paris      <-  "datashield_test&"
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame(server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
devtools::document()
?ds.build.login.data.frame
devtools::document()
?ds.build.login.data.frame
?dsAggregate
?ds.aggregate
?ds.build.login.data.frame
devtools::document()
devtools::document()
?ds.build.login.data.frame
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame(server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
ds.login(
login.data.frame = login.data)
?ds.cor
require('DSI')
require('DSOpal')
require('dsBaseClient')
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
datashield.logout(connections)
login.data
ds.login(
login.data.frame = login.data, assign = TRUE, symbol ="D")
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3",
url = "http://192.168.56.100:8080/",
user = "administrator", password = "datashield_test&",
table = "CNSIM.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# Log onto the remote Opal training servers
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")
ds.colnames("D")
ds.login(
login.data.frame = login.data, assign = TRUE, variables = c("LAB_TRIG","DIS_CVA"),symbol ="D")
devtools.document()
devtools::document()
?ds.login
devtools::document()
?ds.login
devtools::document()
?ds.login
?ds.aggregate
devtools::document()
?ds.login
devtools::document()
?ds.login
devtools::document()
?ds.login
devtools::document()
?ds.login
?ds.cor
?datashield.logout
devtools::document()
?ds.logout
?ds.cor
?ds.build.login.data.frame
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame(server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
ds.login(
login.data.frame = login.data)
login.data
devtools::test(filter = "expt-ds_login")
devtools::test(filter = "expt-ds_logout")
