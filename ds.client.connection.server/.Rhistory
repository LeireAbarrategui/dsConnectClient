F <- M_4 %*% A_2
print(F)
print("receiver in master mode - decrypt")
print(solve(M_3))
decrypted.matrix <- solve(t(M_3)) %*%  F
print(decrypted.matrix)
print("master in receiver mode")
A_2 <- matrix(c(50:65),3,5)
A_2[,column] <- encrypted.param
print(encrypted.param)
print("A_2")
print(A_2)
print("received matrix")
M_4 <- E
print("M_4")
print(M_4)
F <- M_4 %*% A_2
print(F)
print("receiver in master mode - decrypt")
print(solve(M_3))
decrypted.matrix <- solve(t(M_3)) %*%  F
print(decrypted.matrix)
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
source('~/Documents/GitHub/Ranking/sharingSecurely/some_validations.R')
row <- 1
print("row")
print(row)
column <- 5
print("column")
print(column)
print("master - step 1")
A <- matrix(c(1:15),3,5)
print("A")
print(A)
print("masking")
M_1 <- matrix(as.integer(runif(25,1,100)),5,5)
M_1 <- diag(1,5,5)
print(M_1)
C <- t(M_1) %*% t(A)
print("C")
print(C)
print("receiver - step 2")
B <- matrix(c(20:34),3,5)
print("B")
print(B)
print("M_2")
M_2<- C
print(M_2)
print("D")
D <- (M_2) %*% B
print(D)
print("master - step 3 - decrypt")
E <- solve(t(M_1)) %*% D
print("E")
print(E)
print(t(A) %*% B)
dot.product <- E[row,column]
print("***********dot.product******************")
print(dot.product)
print("param")
param <- 1000
print(param)
print("encoding ratio")
encoding.ratio <- param/dot.product
print(encoding.ratio)
print("encoding ratio")
encoding.ratio <- param/dot.product
print(encoding.ratio)
print("master vector")
master.vector <- A[,column]
print(master.vector)
c(13,14,15) * c(20,21,22)
A
B
A[,1] * B[,5]
sum(A[,1] * B[,5])
row <- 1
print("row")
print(row)
column <- 5
print("column")
print(column)
print("master - step 1")
A <- matrix(c(1:15),3,5)
print("A")
print(A)
print("masking")
M_1 <- matrix(as.integer(runif(25,1,100)),5,5)
M_1 <- diag(1,5,5)
print(M_1)
C <- t(M_1) %*% t(A)
print("C")
print(C)
print("receiver - step 2")
B <- matrix(c(20:34),3,5)
print("B")
print(B)
print("M_2")
M_2<- C
print(M_2)
print("D")
D <- (M_2) %*% B
print(D)
print("master - step 3 - decrypt")
E <- solve(t(M_1)) %*% D
print("E")
print(E)
print(t(A) %*% B)
dot.product <- E[row,column]
print("***********dot.product******************")
print(dot.product)
print("param")
param <- 1000
print(param)
print("encoding ratio")
encoding.ratio <- param/dot.product
print(encoding.ratio)
print("master vector")
master.vector <- A[,row]
print(master.vector)
print("encrypted param")
encrypted.param <- encoding.ratio * master.vector
print(encrypted.param)
print("receiver - vector")
receiver.vector <- B[,column] #confusing
print(receiver.vector)
print(t(master.vector) %*% receiver.vector)
T <- t(A) %*% B
print(T)
sum(A[,1] * B[,5])
print("receiver in master mode")
B_2 <- matrix(c(30:44),3,5)
B_2[,row] <- receiver.vector
print(receiver.vector)
print("B_2")
print(B_2)
print("masking")
M_3 <- matrix(as.integer(runif(25,1,100)),5,5)
M_3 <- diag(1,5,5)
print(M_3)
E <- t(M_3) %*% t(B_2)
print("encoded matrix E")
print(E)
print("dot.product")
print(dot.product)
print("master in receiver mode")
A_2 <- matrix(c(50:64),3,5)
A_2[,column] <- encrypted.param
print(encrypted.param)
print("A_2")
print(A_2)
print("received matrix")
M_4 <- E
print("M_4")
print(M_4)
F <- M_4 %*% A_2
print(F)
print("dot.product")
print(dot.product)
print(sum(A_2[,column] * E[row,]))
print("receiver in master mode - decrypt")
print(solve(M_3))
decrypted.matrix <- solve(t(M_3)) %*%  F
print(decrypted.matrix)
library(ds.client.connection.server)
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
a <- "djdjd"
as.vector(a)
a
a <- "djdjd"
is.vector(a)
a <- c("ududud", "bbbbb")
class(a)
is.vector(a)
a
toString(a)
dput(a)
a <- "&&&&"
dput(a)
?dput
a <- c("ydydy", "hdhdhd")
paste0("c(",a, ")")
a <- c("ydydy", "hdhdhd")
a
as.character(a)
dput(a)
a <- "ehehehe"
dput(a)
library(ds.client.connection.server)
class(pi)
.share.parameter <- function(connections=NULL,param.names = NULL)
{
if(length(connections) > 1 & is.character(param.names))
{
outcome <- FALSE
if (nchar(param.names) > 0)
{
success <- .assignSettings(connections)
if (success)
{
outcome <- .complete.exchange(connections,param.names)
}
}
else
{
stop("ERR:003")
}
}
else
{
warning("WAR:001")
}
}
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
a <- NULL
is.character(a)
library(ds.client.connection.server)
?glm
a <- c("pi_value_1","pi_value_2")
a
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
toString(x, width = 8)
paste0(a)
length(paste0(a))
s <- paste0('"', paste(a, collapse='", "'), '"')
s
s <- paste0('c("', paste(a, collapse='", "'), '")')
s
s <- paste0("c('", paste(a, collapse="'", '"), "')")
s <- paste0("c('", paste(a, collapse="'", '"), "')")
s <- paste0("c('", paste(a, collapse="'", '"),"')"))
s <- paste0("c('", paste(a, collapse="'", '"),"')")
s <- paste0('"', paste(x, collapse='", "'), '"')
s
s <-  paste(x, collapse="','")
s
s <-  paste(x, collapse="','")
t <- paste0("c('",s,"')")
t
?ds.remove
?ds.remove.variable
library(ds.client.connection.server)
?ds.exists.on.server
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
?call
?call
?datashield.errors
?DSI::datashield.errors
library(ds.client.connection.server)
devtools::session_info()
install.packages('DSI')
a <- ("function.name", 1,2,"r",TRUE)
a <- list("function.name", 1,2,"r",TRUE)
as.call(a)
library(ds.client.connection.server)
library(ds.client.connection.server)
call("function.name")
call("function.name",1,3,4)
call("function.name",1,"3",4)
3/0
?stopifnot
dim(E)
DANGER_Error <- function(){stop("SERVER::ERR:0001")}
Danger_Error()
DANGER_Error()
call("DANGER_Error")
parent.frame?
?parent.frame()
library(ds.client.connection.server)
devtools::load_all(".")
library(ds.client.connection.server)
?stop
library(ds.client.connection.server)
a <- ::tot::ERR:007
a <- "::tot::ERR:007"
a.list <- strsplit(a, "::")
a.list
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.error.R')
?messagge
?message
?symbol
library(ds.client.connection.server)
ls
ls()
a
class(a)
class(a) == "character"
class(a) %in% "character"
symbol("a")
symbol(a)
as.symbol(a)
as.symbol("a")
as.symbol("123")
as.symbol(123)
as.symbol("Danger_Error")
class(as.symbol("Danger_Error"))
class(as.symbol(123))
?name
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
??newDSLoginBuilder
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
?ls
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
View(ds.error)
install.packages("devtools")
a <- NULL
all(a == FALSE)
all(a == TRUE)
a == TRUE
a == FALSE
?ds.aggregate
library(ds.client.connection.server)
library(ds.client.connection.server)
a <- "hi\nhello"
cat(a)
print(a)
message(a)
library(ds.client.connection.server)
?message
message("ABC", "DEF")
suppressMessages(message("ABC"))
testit <- function() {
message("testing package startup messages")
packageStartupMessage("initializing ...", appendLF = FALSE)
Sys.sleep(1)
packageStartupMessage(" done")
}
message("ABC", "DEF")
suppressMessages(message("ABC"))
testit <- function() {
message("testing package startup messages")
packageStartupMessage("initializing ...", appendLF = FALSE)
Sys.sleep(1)
packageStartupMessage(" done")
}
testit()
suppressPackageStartupMessages(testit())
suppressMessages(testit())
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
a <- 1
is.numeric(a)
class(a)
for loop
a <- c(1,3,3,4,4)
for (i in a) {print(i)}
library(ds.client.connection.server)
library(knitr)
install.packages("vignettes")
devtools::install("vignettes")
devtools::install("Vignette")
install.packages("Vignette")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(ds.client.connection.server)
R CMD
devtools::build_vignettes()
devtools::install_github(build_vignettes = TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
devtools::install_github(build_vignettes = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(ds.client.connection.server)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
server.urls     <- c(url_1,url_2,url_3)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url
url_1 = 'https://192.168.56.100:8443'
url_2 = 'https://192.168.56.100:8443'
url_3 = 'https://192.168.56.100:8443'
server.urls     <- c(url_1,url_2,url_3)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
server.tables  <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables  <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/tobeDeleted.R')
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
devtools::load_all(".")
