source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
urls <- c(
"http://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html",
"http://en.wikipedia.org/wiki/Xz",
"I'm no URL"
)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
e<-simple.exception("test exception")
raise.exception("test exception")
try.catch(raise.exception(e),
exception = function(e) e,
finally=print("Hello"))
tryCatch(raise.exception(e),
exception = function(e) e,
finally=print("Hello"))
beera <- function(expr){
tryCatch(expr,
error = function(e){
message("An error occurred:\n", e)
},
warning = function(w){
message("A warning occured:\n", w)
},
finally = {
message("Finally done!")
})
}
library(ds.client.connection.server)
install.packages("bitops")
library(ds.client.connection.server)
devtools::test()
message("ABC", "DEF")
suppressMessages(message("ABC"))
testit <- function() {
message("testing package startup messages")
packageStartupMessage("initializing ...", appendLF = FALSE)
Sys.sleep(1)
packageStartupMessage(" done")
}
testit()
suppressPackageStartupMessages(testit())
suppressMessages(testit())
error <- "ERR:001"
strcmp(error,"ERR:001")
error == "ERR:001"
ssubstring("abcdef", 1:6, 1:6)
substring("abcdef", 1:6, 1:6)
substr("abcdef", 2, 4)
tst1 <- function(...) stop("dummy error")
try(tst1(1:10, long, calling, expression))
tst2 <- function(...) stop("dummy error", call. = FALSE)
try(tst2(1:10, longcalling, expression, but.not.seen.in.Error))
ds.login()
ds.login()
library(ds.client.connection.server)
ds.login()
ds.login()
library(ds.client.connection.server)
ds.login()
View(ds.test_env)
View(ds.test_env)
library(ds.client.connection.server)
ds.login()
ds.login()
library(ds.client.connection.server)
ds.login()
library(ds.client.connection.server)
ds.login()
library(ds.client.connection.server)
ds.login()
ds.login(login)
login <- ""
ds.login(login)
library(ds.client.connection.server)
library(ds.client.connection.server)
.build.data.frame()
library(ds.client.connection.server)
.build.data.frame()
library(ds.client.connection.server)
library(ds.client.connection.server)
build.data.frame()
library(ds.client.connection.server)
library(ds.client.connection.server)
build.data.frame()
.build.data.frame()
library(ds.client.connection.server)
build.data.frame()
library(ds.client.connection.server)
server <- c("study1", "study2")
url <- c("https://some.opal.host:8443","https://another.opal.host")
user <- c("user1", "datashield-certificate.pem")
password <- c("user1pwd", "datashield-private.pem")
table <- c("store.Dataset","foo.DS")
options <- c("","c(ssl.verifyhost=2,ssl.verifypeer=1)")
driver <- c("","OpalDriver")
logindata <- data.frame(server,url,user,password,table,options,driver)
server <- c("study1", "study2", "study3")
url <- c("https://some.opal.host:8443","https://another.opal.host","https://another.opal.host")
user <- c("user1", "datashield-certificate.pem","hie")
password <- c("user1pwd", "datashield-private.pem", "hie")
table <- c("store.Dataset","foo.DS", "hi")
options <- c("","c(ssl.verifyhost=2,ssl.verifypeer=1)")
driver <- c("","OpalDriver")
logindata <- data.frame(server,url,user,password,table,options,driver)
server <- c("study1", "study2", "study3")
url <- c("https://some.opal.host:8443","https://another.opal.host","https://another.opal.host")
user <- c("user1", "datashield-certificate.pem","hie")
password <- c("user1pwd", "datashield-private.pem", "hie")
table <- c("store.Dataset","foo.DS", "hi")
options <- c("","c(ssl.verifyhost=2,ssl.verifypeer=1)", "")
driver <- c("","OpalDriver", "")
logindata <- data.frame(server,url,user,password,table,options,driver)
library(ds.client.connection.server)
warnings()
devtools::test()
warnings()
library(ds.client.connection.server)
warnings()
devtools::test()
warnings()
library(ds.client.connection.server)
devtools::test_coverage()
devtools::test_coverage()
DSI::datashield.logout()
DSI::datashield.logout
source('~/Downloads/communication_part_1.R')
sample.large.numbers
source('~/Documents/some-functions.R')
l <- sample.large.numbers()
print(l)
l <- sample.large.numbers()
m <- sample.tiny.numbers()
source('~/Documents/some-functions.R')
m <- sample.tiny.numbers()
m <- sample.tiny.numbers()
source('~/Documents/some-functions.R')
source('~/Documents/some-functions.R')
source('~/Documents/some-functions.R')
m <- sample.tiny.numbers()
source('~/Documents/some-functions.R')
m <- sample.negative.numbers()
source('~/Documents/some-functions.R')
m <- sample.negative.numbers(10)
negative.numbers <- sample.negative.numbers(n= 10, min.number = 100)
source('~/Documents/some-functions.R')
negative.numbers <- sample.negative.numbers(n= 10, min.number = 100)
negative.numbers <- sample.negative.numbers(n= 10, min.numbers = 100)
source('~/Documents/some-functions.R')
l <- sample.large.numbers(-10)
l <- sample.large.numbers(max.number = -10)
install.packages("vioplot")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Documents/packages.R')
source('~/Documents/packages.R')
install.packages('vioplot',dependencies = TRUE)
source('~/Documents/packages.R')
vioplot
beanplot(rnorm(22),rnorm(22),rnorm(22),main="Test!",rnorm(3))
install.packages('beanplot')
source('~/Documents/packages.R')
source('~/Documents/packages.R')
library(vioplot)
install.packages("beanplot",dependencies = TRUE)
library(beanplot)
beanplot(rnorm(22),rnorm(22),rnorm(22),main="Test!",rnorm(3))
a <- beanplot(rnorm(22),rnorm(22),rnorm(22),main="Test!",rnorm(3))
install.packages("areaplot",dependencies = TRUE)
library(areaplot)
areaplot(rpois(10,40))
areaplot(rpois(10,20))
install.packages("compoisson",dependencies = TRUE)
library(compoisson)
data(insurance);
fit = com.fit(Lemaire);
z = com.compute.z(fit$lambda, fit$nu);
data(insurance);
fit = com.fit(Lemaire);
z = com.compute.z(fit$lambda, fit$nu);
source('~/Documents/packages.R')
source('~/Documents/packages.R')
remove.packages("compoisson",dependencies = TRUE)
source('~/Documents/packages.R')
source('~/Documents/packages.R')
remove.packages("compoisson")
remove.packages("compoisson")
source('~/Documents/packages.R')
remove.packages("compoisson")
source('~/Documents/packages.R')
dayOfTheWeek <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
dayOfTheWeek <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
dayOfTheWeek <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
Humidity <- c(34,34,34,90,80,70,0)
humidity <- c(34,34,34,90,80,70,0)
temperature <- c(23,23,12,9,12,19,20)
weather <- data.frame(dayOfTheWeek,humidity,temperature)
View(weather)
library(readr)
dataset <- read.csv(NULL)
View(dataset)
library(readr)
weather <- read_csv("~/Downloads/weather.csv")
View(weather)
View(weather)
library(readr)
weather_file <- read_csv("~/Downloads/weather.csv")
View(weather_file)
View(weather_file)
days <- (1,"3")
days <- (1,'3')
prime <- c(2,3,5)
non.prime <- c(1,4,-1)
prime * non.prime
prime - non.prime
prime + non.prime
prime * non.prime
days <- c(1,"3")
days[1]
days <- <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
days <-  c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
months <- c("January", "February", "March", "April", "May", "June", "July", "August","September", "October", "November" <)
months <- c("January", "February", "March", "April", "May", "June", "July", "August","September", "October", "November", "December")
days * months
days + months
sorted.days <- sort(days)
rainy.days <- c(TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE)
sunny.days <- c(FALSE,TRUE, FALSE, FALSE, TRUE, TRUE, FALSE)
rainy.days + sunny.days
rainy.days - sunny.days
c(TRUE, 0, 1,2)
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
humidity <- c(34,34,34,90,80,70,0)
temperatures <- c(23,23,12,9,12,19,20)
weather <- data.frame(days,humidity,temperatures)
weather[1,]
weather[,3]
weather[1:3,]
weather[,1:2]
weather[1:3,1:2]
weather[23]
weather[temperatures = 23]
weather[weather[3] = 23]
weather[weather[3] = "23"]
weather.list <- list(days, humidity, temperatures)
View(weather.list)
weather.condition <- list("30/08/2019",0.89, 21, "23 W")
weather.condition[[1]]
weather.condition[[1:3]]
weather.condition[[1:2]]
weather.list(days, rainy.days, sunny.days)
weather.list <- list(days, rainy.days, sunny.days)
print(weather.list)
paste(weather.list[[1]][1], weather.list[[2]][1],weather.list[[3]][1])
weather.condition[1:2]
weather.condition[1]
unlist(weather.condition)
sort(weather.condition)
prime.list <- list(2,3,5)
non.prime.list <- list(1,4,-1)
prime.list + non.prime.list
df <- tibble(x = 1:3, y = 3:1)
add_column(df, z = -1:1, w = 0)
library(tibble)
df <- tibble(x = 1:3, y = 3:1)
add_column(df, z = -1:1, w = 0)
add_column(df, x = 4:6)
add_column(df, a = 4:6)
library(ds.client.connection.server)
ds.logout(NULL)
library(ds.client.connection.server)
ds.logout()
library(ds.client.connection.server)
warnings
warnings()
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.login.R')
servers <- c("study1", "study2", "study3")
urls <- c(ds.test_env$ip_address_1,ds.test_env$ip_address_2,ds.test_env$ip_address_3)
users <- c(ds.test_env$user_1,ds.test_env$user_2,ds.test_env$user_3)
passwords <- c(ds.test_env$password_1,ds.test_env$password_2,ds.test_env$password_3)
tables <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- ds.build.login.data.frame(servers,urls,urls,tables,users,passwords)
stat.vars <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection <- .make.connection(login,assign = TRUE,stat.vars)
print(connection)
library(ds.client.connection.server)
servers <- c("study1", "study2", "study3")
urls <- c(ds.test_env$ip_address_1,ds.test_env$ip_address_2,ds.test_env$ip_address_3)
users <- c(ds.test_env$user_1,ds.test_env$user_2,ds.test_env$user_3)
passwords <- c(ds.test_env$password_1,ds.test_env$password_2,ds.test_env$password_3)
tables <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- ds.build.login.data.frame(servers,urls,tables,users,passwords)
print(login.data)
library(ds.client.connection.server)
install.packages("roxygen2")
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.assign.value.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.aggregate.R')
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
?dim
x <- 1:12 ; dim(x) <- c(3,4)
x <- 1:12 ; dim(x)
dim (x)
x <- 1:9
dim(x)
dim (login.data)
View(ds.test_env)
dim(ds.test_env$local.values)
library(ds.client.connection.server)
dim(ds.test_env$local.values)
devtools::test()
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
devtools::test()
D$
devtools::test()
library(ds.client.connection.server)
devtools::test()
ls()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.aggregate.R')
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.aggregate.R')
devtools::test()
class(NULL)
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
L <= "NR"
L <- "NR"
L == "NR"
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::test()
library(ds.client.connection.server)
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::test()
library(ds.client.connection.server)
?devtools::test()
devtools::test(".")
library(ds.client.connection.server)
devtools::test(".")
install.packages("devtools")
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.assign.value.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.assign.value.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.assign.value.R')
library(ds.client.connection.server)
class("")
lenght("")
length("")
library(ds.client.connection.server)
debugSource('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.assign.value.R')
library(ds.client.connection.server)
ls()
new.env("JJ")
?new.env
e1 <- new.env(parent = baseenv())
ls()
ls("e1")
e1$k <- 0
ls("e1")
ls(e1)
ls(as.symbol("e1"))
ls(as.environment("e1"))
ls()
exist("k",e1)
exists("k",e1)
exists("k",as.symbol("e1"))
ls(e1)
ls(as.call("e1"))
ls(as.call(e1))
ls(as.environment("e1"))
ls(as.environment(e1))
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.assign.value.R')
library(ds.client.connection.server)
vars  <- ls()
print (vars)
var.to.find <- x
vars %in% var.to.find
var.to.find <- "x"
vars %in% var.to.find
r <- vars[vars %in% var.to.find]
print(r)
r <- vars[vars == var.to.find]
print(r)
vars == var.to.find
match(vars, var.to.find)
which(var.to.find %in% vars)
var.to.find <- x
which(var.to.find %in% vars)
debugSource('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.assign.value.R')
library(ds.client.connection.server)
