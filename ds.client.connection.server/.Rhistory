indices <- c(1:no_servers)
return(ip_addresses[indices])
},
get_users = function(no_servers)
{
users <- c(self$user_1,self$user_2,self$user_3)
if (no_servers > length(users))
{
max_index = length(users)
}
else
{
max_index = no_servers
}
indices <- c(1:no_servers)
return(users[indices])
},
get_passwords = function(no_servers)
{
passwords <- c(self$password_1,self$password_2,self$password_3)
if (no_servers > length(passwords))
{
max_index = length(passwords)
}
else
{
max_index = no_servers
}
indices <- c(1:no_servers)
return(passwords[indices])
},
get_drivers = function(no_servers)
{
return(c(rep(self$driver,no_servers)))
}
)
a
a[c(1:1)]
a <- c("a","b", "c")
mean(a)
mean
installed.packages("devtools")
installed.packages("devtools")
install.packages("devtools")
install.packages(c("opalr", "RCurl"))
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/libraries/load_libraries.R')
load.libraries <- function()
{
print('Loading packages....')
package.loaded = require('opalr')
if (!package.loaded)
{
install.packages('opalr',repos='http://cran.obiba.org')
library('opalr')
}
package.loaded = require('DSOpal')
if (!package.loaded)
{
devtools::install_github('datashield/DSOpal', force=TRUE)
library('DSOpal')
}
package.loaded = require('DSI')
if (!package.loaded)
{
devtools::install_github('datashield/DSI', force=TRUE)
library('DSI')
}
package.loaded = require('RCurl')
if (!package.loaded)
{
install.packages('RCurl')
library('RCurl')
}
#package.loaded = require('dsBase')
#if (!package.loaded)
#{
#  install.packages('dsBase',repos='http://cran.obiba.org')
#  library('dsBase')
#}
#print('dsModelling')
#package.loaded = require('dsModelling')
#if (!package.loaded)
#{
#  install.packages('dsModelling',repos='http://cran.obiba.org')
#  library('dsModelling')
#}
#package.loaded = require('dsGraphics')
#if (!package.loaded)
#{
#  install.packages('dsGraphics',repos='http://cran.obiba.org')
#  library('dsGraphics')
#}
#package.loaded = require('dsStats')
#if (!package.loaded)
#{
#  install.packages('dsStats',repos='http://cran.obiba.org')
#  library('dsStats')
#}
}
load.libraries()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/libraries/load_libraries.R')
devtools::install_github('datashield/DSOpal', force=TRUE)
devtools::install_github('datashield/DSI', force=TRUE)
devtools::install_github('datashield/DSOpal', force=TRUE)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/libraries/load_libraries.R')
install.packages('opalr',repos='http://cran.obiba.org')
install.packages("opalr", repos = "http://cran.obiba.org")
devttools::install_github('opalr',repos='http://cran.obiba.org')
devttools::install_github('opalr')
install.packages('opalr',repos='http://cran.obiba.org')
devtools::install_github("obiba/opalr", ref = "resources", dependencies = TRUE)
devtools::install_github("datashield/DSI", ref = "resources", dependencies = TRUE)
devtools::install_github("datashield/DSOpal", ref = "resources", dependencies = TRUE)
devtools::install_github("datashield/dsBaseClient", ref = "DSI", dependencies = TRUE)
library(DSOpal)
library(dsBaseClient)
# prepare login data and resources to assign
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# login and assign resources
conns <- datashield.login(logins = logindata, assign = TRUE, symbol = "res")
# assigned objects are of class ResourceClient (and others)
ds.class("res")
# coerce ResourceClient objects to data.frames
# (DataSHIELD config allows as.resource.data.frame() assignment function for the purpose of the demo)
datashield.assign.expr(conns, symbol = "D", expr = quote(as.resource.data.frame(res)))
ds.class("D")
# note that some dsBase functions do not like that the data.frame has multiple and different classes
# (despite all are data.frames). Then query colnames one by one:
lapply(conns, function(conn) {ds.colnames("D", datasources = conn)})
# do usual dsBase analysis
ds.summary('D$LAB_HDL')
# vector types are not necessarily the same depending on the data reader that was used
ds.class('D$GENDER')
ds.asFactor('D$GENDER', 'GENDER')
ds.summary('GENDER')
# or coerce to a dplyr's tbl, which is more suitable for large/big datasets analysis
# (DataSHIELD config allows as.resource.tbl() assignment function for the purpose of the demo)
datashield.assign.expr(conns, symbol = "T", expr = quote(as.resource.tbl(res)))
ds.class("T")
# DataSHIELD analysis using dplyr objects and functions is to be invented...
datashield.logout(conns)
library(DSOpal)
library(dsBaseClient)
# prepare login data and resources to assign
builder <- DSI::newDSLoginBuilder()
builder$append(server = "study1", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM1", driver = "OpalDriver")
builder$append(server = "study2", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM2", driver = "OpalDriver")
builder$append(server = "study3", url = "https://opal-test.obiba.org", user = "dsuser", password = "password", resource = "test.CNSIM3", driver = "OpalDriver")
logindata <- builder$build()
# login and assign resources
conns <- datashield.login(logins = logindata, assign = TRUE, symbol = "res")
# assigned objects are of class ResourceClient (and others)
r <- ds.class("res")
# coerce ResourceClient objects to data.frames
# (DataSHIELD config allows as.resource.data.frame() assignment function for the purpose of the demo)
datashield.assign.expr(conns, symbol = "D", expr = quote(as.resource.data.frame(res)))
ds.class("D")
# note that some dsBase functions do not like that the data.frame has multiple and different classes
# (despite all are data.frames). Then query colnames one by one:
lapply(conns, function(conn) {ds.colnames("D", datasources = conn)})
# do usual dsBase analysis
ds.summary('D$LAB_HDL')
# vector types are not necessarily the same depending on the data reader that was used
ds.class('D$GENDER')
ds.asFactor('D$GENDER', 'GENDER')
ds.summary('GENDER')
# or coerce to a dplyr's tbl, which is more suitable for large/big datasets analysis
# (DataSHIELD config allows as.resource.tbl() assignment function for the purpose of the demo)
datashield.assign.expr(conns, symbol = "T", expr = quote(as.resource.tbl(res)))
ds.class("T")
# DataSHIELD analysis using dplyr objects and functions is to be invented...
datashield.logout(conns)
View(builder)
View(builder)
View(builder)
View(r)
View(r)
View(r)
r[1]
class(r[1])
r[1][3]
r[1][[2]]
r[1]
r[1][1]
r[1][[1]]
class(r[1][[1]])
grep(r[1][[1]], "R6")
grep("R6",r[1][[1]])
grep("R6",r[1][[2]])
grep("R6",r)
class(grep("R6",r))
class(grep("R6",r[1]))
grep("R6",r[1])
grep("R6",r[2])
grep("R6",r[3])
class(logindata)
print(login.data)
print(logindata)
as.data.frame(logindata)
is.data.frame(logindata)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
runif(10,1,3)
a <- c("a", "b", "c")
indices <- c(1:1)
a[indices]
b <- a[indices]
class(b)
as.character(b)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/connection_to_datasets/login_details.R')
library(ds.client.connection.server)
setVariable <- function()
{
assign('concealed.vector',runif(21 , min = MIN, max = MAX),environment())
return(get('concealed.vector', environment()))
}
setVariable
setVariable()
setVariable <- function()
{
assign('concealed.vector',runif(21 , min = -100, max = 100),environment())
return(get('concealed.vector', environment()))
}
setVariable()
setVariable <- function()
{
sharing <- new.env(parent = baseenv())
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
setVariable()
ls(baseenv)
ls(baseenv())
setVariable <- function()
{
sharing <- new.env(parent = globalenv())
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
setVariable()
setVariable <- function()
{
sharing <- new.env(parent = globalenv())
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
setVariable()
setVariable <- function()
{
sharing <- new.env(parent = globalenv())
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
sharing <- new.env(parent = globalenv())
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
View(sharing)
setSharingEnvDS <- function()
{
sharing <- new.env(parent = globalenv())
return(sharing)
}
setSharingDS()
setSharingEnvDS()
ls(setSharingEnvDS())
setVariable <- function()
{
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
setVariable()
ls(setSharingEnvDS())
setVariable()
ls(sharing)
?dsAssign
?ds.assign.value
setSharingEnvDS <- function()
{
return(new.env(parent = globalenv())
}
setSharingEnvDS <- function()
{
return(new.env(parent = globalenv()))
}
sharing <- setSharingEnvDS()
ls(sharing)
setVariableDS <- function()
{
assign('concealed.vector',runif(21 , min = -100, max = 100),sharing)
return(get('concealed.vector', sharing))
}
ls(sharing)
View(sharing)
setSharingEnvDS <- function()
{
return(new.env(parent = globalenv()))
}
sharing <- setSharingEnvDS()
setVariableDS()
ls(sharing)
library(ds.client.connection.server)
devtools::test()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds.create_environment.R')
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.create_environment.R')
a <- ""
length(a)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.create_environment.R')
length(a) == 1
a <- new.env("bubba")
bubba <- new.env()
bubba$elephan <- 3134
View(bubba)
View(bubba)
?ls
?ds.aggregate
devtools::load_all(".")
ls(envir=yeusus)
?typeof
devtools::document()
hello <- data.frame(c(1:10), c(2:12))
hello <- data.frame(c(1:10), c(2:11))
typeof(hello)
class(hello)
valid.types <- c("character","complex","double","expression","integer","list","logical","numeric","single","raw","vector","S4","NULL","function","externalptr","environment")
"character" in valid.types
"character" %in% valid.types
a <- "character"
a %in% valid.types
a <- "bla"
a %in% valid.types
library(ds.client.connection.server)
rm(ds.create_environment())
rm(ds.create_environment)
library(ds.client.connection.server)
?ds.class
library(ds.client.connection.server)
library(dsBaseClient)
?.GlobalEnv
outcome <- c(TRUE,TRUE,TRUE)
all(TRUE %in% outcome)
outcome <- c(TRUE,TRUE,FALSE)
all(TRUE %in% outcome)
all(outcome %in% TRUE)
outcome <- c(TRUE,TRUE,TRUE)
all(outcome %in% TRUE)
outcome == TRUE
sum(outcome == TRUE)
outcome <- c(TRUE,TRUE,FALSE)
sum(outcome == TRUE)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.exists.R')
devtools::test_coverage()
install.packages("covr")
install.packages("covr")
covr::package_coverage(pkgPath)
install.packages("covr")
install.packages("covr")
library(covr)
report()
package_coverage()
package_coverage()
package_coverage()
ls(sharing)
devtools::install_github("datashield/DSOpal”, force=TRUE)
devtools::install_github("datashield/DSI", force=TRUE)
devtools::install_github("datashield/DSOpal”, force=TRUE)
)
devtools::install_github("datashield/DSOpal”, force=TRUE)
devtools::install("datashield/DSOpal”, force=TRUE)
devtools::install("datashield/DSOpal", force=TRUE)
devtools::install("DSOpal", force=TRUE)
install.packages(DSI)
install.packages("DSI")
install.packages("DSI")
install.packages("DSOpal")
install.packages("DSOpal")
version
devtools::install("DSOpal", force=TRUE)
devtools::install("datashield/DSOpal", force=TRUE)
install.packages("DSOpal", forces=TRUE)
version
devtools::intall_github("datashield/DSI", dependencies=TRUE, forces=TRUE)
devtools::intall("datashield/DSI", dependencies=TRUE, forces=TRUE)
devtools::intalls("datashield/DSI", dependencies=TRUE, forces=TRUE)
devtools::install("datashield/DSI")
install.packages("DSI", dependencies = TRUE)
install.packages("DSOpal", dependencies = TRUE)
version
devtools::install_github("datashield/DSOpal", dependiencies = TRUE)
devtools::install_github("datashield/DSI", dependiencies = TRUE)
devtools::install_github("datashield/DSI", dependencies = TRUE)
devtools::install_github("datashield/DSI", dependencies = TRUE)
install.packages("DSLite")
library(ds.client.connection.server)
devtools::install_github("datashield/DSOpal", ref="1.0.x", force=TRUE)
remove.packages("DSI")
remove.packages("DSOpal")
install.packages("DSI",dependencies = TRUE)
install.packages("DSI", dependencies = TRUE)
install.packages("DSOpal", dependencies = TRUE)
devtools::install_github("datashield/DSOpal", ref="1.0.x", force=TRUE)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
a <- FALSE
a == FALSE
as.logical(a == FALSE)
a <- "NR"
length(a)
library(ds.client.connection.server)
print(colnames(login.info)[1])
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/test.ds.assign.R')
testErrorServer()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/test.ds.assign.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/test.ds.assign.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/connection_to_datasets/init_all_datasets.R')
connect.all.datasets()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/setup.R')
connect.all.datasets()
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/setup.R')
result <- DSResult$new()
library(DSI)
result <- DSResult$new()
library(DSOpal)
result <- DSResult$new()
result <- DSI::DSResult$new()
mean("he")
ls("")
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/test.ds.assign.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/test.ds.assign.R')
system.error.server()
View(init.dataset.2)
install.packages("DSI", dependencies = TRUE)
?devtools::test
test_coverage(pkg = ".", show_report = interactive(), ...)
devtools::test_coverage(pkg = ".", show_report = interactive(), ...)
devtools::test_coverage(pkg = ".", show_report = interactive())
devtools::test()
library(ds.client.connection.server)
library(ds.client.connection.server)
devtools::install_github("datashield/DSOpal", ref="1.0.x", force=TRUE)
remove.packages("DSI")
remove.packages("DSI")
install.packages("DSI", dependencies = TRUE, FORCE=TRUE)
datashield.aggregate
library(DSI)
datashield.aggregate
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
matrix(c(1,2,3,4),2,2)
a <- matrix(c(1,2,3,4),2,2)
as.expression(a)
b <- as.expression(a)
as.matrix(b)
c(1,2,3,4)
matrix(c(1,2,3,4), 2,2)
as.character(matrix(c(1,2,3,4), 2,2))
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
devtools::load_all(".")
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.share.param.R')
install.packages(c("DSI", "DSOpal", "httr"))
install.packages("test_that")
devtools::install("test_that")
library(tools)
install.packages("devtools")
install.packages("RCurl")
install.packages('DSI')
install.packages('DSOpal')
install.packages('DSLite')
install.packages('dsBaseClient', repos='http://cran.obiba.org', type='source')
devtools::install("dsBaseClient")
devtools::install_github("dsBaseClient")
install.packages('dsBaseClient', repos='http://cran.obiba.org', type='source')
install.packages('dsBaseClient', repos='http://cran.obiba.org', type='source', dependencies = TRUE)
install.packages('fields')
install.packages('dsBaseClient', repos='http://cran.obiba.org', type='source', dependencies = TRUE)
install.packages('metafor')
install.packages('dsBaseClient', repos='http://cran.obiba.org', type='source', dependencies = TRUE)
?datashield.assign
??datashield.assign
a = 9
stopifnot(a == 10)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
assertError(sqrt("abc"))
assertWarning(matrix(1:8, 4,3))
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
case_when
?case_when
