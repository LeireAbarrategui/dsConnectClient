library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(DSI)
library(DSOpal)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
install.packages("DSOpal")
install.packages("DSOpal")
devtools::install_github("datashield/DSOpal")
devtools::install_github("datashield/DSOpal", force=TRUE)
library(DSI)
library(DSOpal)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
library(DSI)
library(DSOpal)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
library(dsBase)
library(DSI)
library(DSOpal)
library(dsBase)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.nonparametric/ds.client.nonparametric/R/testDummy.R')
library(DSI)
library(DSOpal)
library(RCurl)
library(dsBase)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
library(DSI)
library(DSOpal)
library(RCurl)
library(dsBase)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
library(ds.client.connection.server)
install.packages(c("curl", "httr")) then try again.
install.packages(c("curl", "httr"))
source('~/Documents/GitHub/ds.client.nonparametric/ds.client.nonparametric/R/testDummy.R')
set_config(config(ssl_verifypeer = 0L ) )
library(DSI)
library(DSOpal)
library(RCurl)
library(dsBase)
library(dsBaseClient)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
library(httr)
set_config(config(ssl_verifypeer = 0L ) )
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
connection.opal <- DSI::datashield.login(logins=login.data, assign=TRUE,variables=stats.var)
ds.make.o()
cally <- "server.median(D$INTEGER)"
ss.obj <- opal::datashield.aggregate(connection.opal, as.symbol(cally))
source('~/Documents/GitHub/ds.client.nonparametric/ds.client.nonparametric/R/testDummy.R')
source('~/Documents/GitHub/ds.client.nonparametric/ds.client.nonparametric/R/testDummy.R')
devtools::install_github("datashield/DSI")
devtools::install_github("datashield/dsBaseClient", ref = "DSI")
devtools::install_github("obiba/opalr")
devtools::install_github("obiba/opalr")
devtools::install_github("obiba/opalr", force=TRUE)
library(DSI)
library(dsBase)
library(dsBaseClient)
library(RCurl)
library(dsStatsClient)
library(dsGraphicsClient)
library(dsModellingClient)
ip_address_1 <- paste("https://192.168.56.100:8443", sep="")
ip_address_2 <- paste("https://192.168.56.100:8443", sep="")
ip_address_3 <- paste("https://192.168.56.100:8443", sep="")
user_1 <- "administrator"
user_2 <- "administrator"
user_3 <- "administrator"
password_1 <- "datashield_test&"
password_2 <- "datashield_test&"
password_3 <- "datashield_test&"
server <- c("study1", "study2", "study3")
url <- c(ip_address_1,ip_address_2,ip_address_3)
user <- c(user_1,user_2,user_3)
password <- c(password_1,password_2,password_3)
table <- c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3")
login.data <- data.frame(server,url,user,password,table)
stats.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/ds.login.R')
View(ds.login)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/dummy.R')
iter <- 12
try(if(iter > 10) stop("too many iterations"))
tst1 <- function(...) stop("dummy error")
try(tst1(1:10, long, calling, expression))
tst2 <- function(...) stop("dummy error", call. = FALSE)
try(tst2(1:10, longcalling, expression, but.not.seen.in.Error))
iter <- 12
try(if(iter > 10) stop("too many iterations"))
log("text")
stopifnot(isNUll(a))
stopifnot(is.null(a))
a <- NULL
stopifnot(is.null(a))
a <- 2
stopifnot(is.null(a))
stopifnot(!is.null(a))
stopifnot(1 == 1, all.equal(pi, 3.14159265), 1 < 2) # all TRUE
m <- matrix(c(1,3,3,1), 2, 2)
stopifnot(m == t(m), diag(m) == rep(1, 2)) # all(.) |=>  TRUE
stopifnot(!is.null(a))
a <- NULL
stopifnot(!is.null(a))
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(is.null(a))
tryCatch(is.null(a),message="error")
tryCatch(is.null(a),warning = function(e){print("TTTTT")})
a <- NULL
tryCatch(is.null(a),warning = function(e){print("TTTTT")})
options(show.error.messages = FALSE)
try(log("a"))
print(.Last.value)
options(show.error.messages = TRUE)
try(log("a"))
print(.Last.value)
options(show.error.messages = FALSE)
try(log("a"))
print(.Last.value)
print(try(log("a"), TRUE))
print(try(log("a"), FALSE))
print(try(log("a"), silent = FALSE))
print(try(log("a"), silent = TRUE))
options(show.error.messages = FALSE)
try(log("a"))
print(.Last.value)
stderr
stderr()
print(stderr())
tryCatch(log(a))
tryCatch(log(a), error = function(e){return "ERR003"})
.Last.value
options(show.error.messages = TRUE)
tryCatch(log(a), error = function(e){return "ERR003"})
tryCatch(log(a), error = function(e){return("ERR003")})
options(show.error.messages = FALSE)
tryCatch(log(a), error = function(e){return("ERR003")})
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
.Last.value
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
E
e
tryCatch(is.null(a))
tryCatch(is.null(a)== TRUE)
tst2 <- function(...) stop("dummy error", call. = FALSE)
try(tst2(1:10, longcalling, expression, but.not.seen.in.Error))
.Last.value
gettext()
cat(sprintf(ngettext(length(miss),
"variable %s contains missing values\n",
"variables %s contain missing values\n"),
paste(sQuote(miss), collapse = ", ")))
.Last.value
miss <- c("one", "or", "another")
cat(ngettext(length(miss), "variable", "variables"),
paste(sQuote(miss), collapse = ", "),
ngettext(length(miss), "contains", "contain"), "missing values\n")
options(show.error.messages = FALSE)
tryCatch(is.null(a)== TRUE)
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
try(log("a"))
library(ds.client.connection.server)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/Definition_tests/init_login_data.R')
init.correct.data()
init.incorrect.data()
.Last.value
try(init.incorrect.password())
init.incorrect.password()
options(warn=-1)
init.incorrect.password()
.Last.value
View(ds.test_env)
View(ds.test_env)
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
.test.incorrrect.url (c('study1', 'study2', 'study3'),
c('//192.168.56.100:8080','//192.168.56.100:8080','//192.168.56.100:8080'),
c(ds.test_env$user_1,ds.test_env$user_2,ds.test_env$user_3),
c(ds.test_env$password_1,ds.test_env$password_2,ds.test_env$password_3),
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
options(warn=TRUE)
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
.test.incorrrect.url (c('study1', 'study2', 'study3'),
c('//192.168.56.100:8080','//192.168.56.100:8080','//192.168.56.100:8080'),
c(ds.test_env$user_1,ds.test_env$user_2,ds.test_env$user_3),
c(ds.test_env$password_1,ds.test_env$password_2,ds.test_env$password_3),
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds_build_login_data_frame.r')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds_build_login_data_frame.r')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tests/testthat/definition_tests/def-ds_build_login_data_frame.r')
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
.test.incorrrect.url (c('study1', 'study2', 'study3'),
c('//192.168.56.100:8080','//192.168.56.100:8080','//192.168.56.100:8080'),
c(ds.test_env$user_1,ds.test_env$user_2,ds.test_env$user_3),
c(ds.test_env$password_1,ds.test_env$password_2,ds.test_env$password_3),
c("TESTING.DATASET1", "TESTING.DATASET2", "TESTING.DATASET3"))
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
devtools::install_github("httr", force=TRUE)
packages.install('httr')
install.packages('httr')
library("httr")
library(ds.client.connection.server)
1/0
remove.packages("opal")
ls()
installed.packages()
l<-installed.packages()
l
View(l)
View(l)
remove.packages("opaladmin")
remove.packages("opal")
devtools::install_github("datashield/DSOpal")
devtools::install_github("datashield/DSOpal", force=TRUE)
devtools::install_github("datashield/DSOpal", force=TRUE)
install.packages("openssl")
install.packages("openssl",depencies=TRUE)
install.packages("openssl",depencies=TRUE)
install.packages("openssl",depencies=TRUE)
devtools::install_github("datashield/DSOpal", force=TRUE)
devtools::install_github("datashield/DSOpal", force=TRUE)
devtools::install_github("datashield/DSOpal", force=TRUE)
devtools::install_github("datashield/DSI", force=TRUE)
devtools::install_github("datashield/DSOpal", force=TRUE)
install.packages("dsBaseClient")
devtools::install_github("datashield/dsBaseClient", force=TRUE)
gh_install_packages("datashield/dsBaseClient", ref = "DSI")
install.packages("githubinstall")
gh_install_packages("datashield/dsBaseClient", ref = "DSI")
library(githubinstall)
gh_install_packages("datashield/dsBaseClient", ref = "DSI")
ryCatch(sqrt("a"), error=function(e) print("You can't take the square root of a character, silly!"))
tryCatch(sqrt("a"), error=function(e) print("You can't take the square root of a character, silly!"))
a <- tryCatch(sqrt("a"), error=function(e) print("You can't take the square root of a character, silly!"))
print a
print(a)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
urls <- c(
"http://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html",
"http://en.wikipedia.org/wiki/Xz",
"I'm no URL"
)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/testTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/R/TryingTryCatch.R')
