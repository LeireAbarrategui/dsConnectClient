ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"character",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
else
{
print("It  did not worked!")
}
server.call <- call("varDS","rUnifDist")
print(server.call)
server.var <- .aggregate(connections,expression = server.call, asynchronous = FALSE)
ds.logout(c)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"character",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
else
{
print("It  did not worked!")
}
server.call <- call("varDS","rUnifDist")
print(server.call)
server.var <- ds.aggregate(connections,expression = server.call, asynchronous = FALSE)
ds.logout(c)
source('~/Documents/GitHub/ds.client.connection.server/ds.client.connection.server/tobeDeleted.R')
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"character",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
server.call <- call("varDS",'rUnifDist')
print(server.call)
server.var <- ds.aggregate(connections,expression = server.call, asynchronous = FALSE)
ds.logout(c)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"numeric",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
server.call <- call("varDS",'rUnifDist')
print(server.call)
server.var <- .aggregate(connections,expression = server.call, asynchronous = FALSE)
print(server.var)
ds.logout(c)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"numeric",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
server.call <- call("varDS",'rUnifDist')
print(server.call)
server.variance <- .aggregate(connections,expression = server.call, asynchronous = FALSE)
print(server.variance)
ds.logout(c)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"numeric",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
server.call <- call("varDS",'rUnifDist')
print(server.call)
server.variance <- ds.aggregate(connections,expression = server.call, asynchronous = FALSE)
print(server.variance)
ds.logout(c)
#Libraries
library(DSI)
library(DSOpal)
library(httr)
library(ds.client.connection.server)
library(dsBaseClient)
#data computers name
server.names   <- c("Paris", "Newcastle", "New York")
#data computers url - Those are likely to be unique for each server
url_Paris     <- 'https://192.168.56.100:8443'
url_Newcastle <- 'https://192.168.56.100:8443'
url_NewYork   <-  'https://192.168.56.100:8443'
server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
table_Paris     <- "TESTING.DATASET1"
table_Newcastle <- "TESTING.DATASET2"
table_NewYork   <- "TESTING.DATASET3"
server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)
user_Paris      <-  "administrator"
user_Newcastle  <-  "administrator"
user_NewYork    <-  "administrator"
server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)
driver_Paris     <- "OpalDriver"
driver_Newcastle <- "OpalDriver"
driver_NewYork   <- "OpalDriver"
server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)
password_Paris      <-  "datashield_test&"
password_Newcastle  <-  "datashield_test&"
password_NewYork    <-  "datashield_test&"
server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
login.data <- ds.build.login.data.frame (server.names,
server.urls,
server.tables,
server.users.id,
server.users.pwd,
server.ssl.options,
server.drivers)
print(login.data)
server.var <- list('ID','CHARACTER', 'LOGICAL','NA_VALUES','INTEGER','NULL_VALUES',
'NON_NEGATIVE_INTEGER','POSITIVE_INTEGER','NEGATIVE_INTEGER',
'NUMERIC', 'NON_NEGATIVE_NUMERIC','POSITIVE_NUMERIC','NEGATIVE_NUMERIC','FACTOR_CHARACTER',
'FACTOR_INTEGER','IDENTIFIER','CATEGORY','IDENTIFIER','CATEGORY')
connections <- ds.login(login.data, variables = server.var)
server.function.call <- call("rUnifDS",100,14,50,10)
var.created <- ds.assign.value(connections, new.variable.name = "rUnifDist",value=server.function.call,"numeric",asynchronous = FALSE)
print(var.created)
if (var.created)
{
print("It worked!")
}
server.call <- call("varDS",'D$POSITIVE_INTEGER')
print(server.call)
server.variance <- ds.aggregate(connections,expression = server.call, asynchronous = FALSE)
print(server.variance)
ds.logout(c)
ls
ls()
ls(all.names = TRUE)
.aggregate
library(ds.client.connection.server)
ds.test_env <- new.env()
ls
ls()
search()
ds.test_env <- new.env()
search()
ls
ls()
ds.env
ds.test_env
ls()
ls("ds.test_env")
ls("ds.test_env")
?ls
ls(pattern="ds")
library(ds.client.connection.server)
library(ds.client.connection.server)
?new.env
version
library(ds.client.connection.server)
search()
packageName()
getpackageName()
getPackageName()
?search()
a <- search()
class(a)
a
library(ds.client.connection.server)
a <- search()
a
options()
require(utils)
## Note: the first two examples will give different results
## if run by example().
ff <- function(x) gg(x)
gg <- function(y) sys.status()
str(ff(1))
gg <- function(y) {
ggg <- function() {
cat("current frame is", sys.nframe(), "\n")
cat("parents are", sys.parents(), "\n")
print(sys.function(0)) # ggg
print(sys.function(2)) # gg
}
if(y > 0) gg(y-1) else ggg()
}
gg(3)
t1 <- function() {
aa <- "here"
t2 <- function() {
## in frame 2 here
cat("current frame is", sys.nframe(), "\n")
str(sys.calls()) ## list with two components t1() and t2()
cat("parents are frame numbers", sys.parents(), "\n") ## 0 1
print(ls(envir = sys.frame(-1))) ## [1] "aa" "t2"
invisible()
}
t2()
}
t1()
test.sys.on.exit <- function() {
on.exit(print(1))
ex <- sys.on.exit()
str(ex)
cat("exiting...\n")
}
test.sys.on.exit()
## gives 'language print(1)', prints 1 on exit
## An example where the parent is not the next frame up the stack
## since method dispatch uses a frame.
as.double.foo <- function(x)
{
str(sys.calls())
print(sys.frames())
print(sys.parents())
print(sys.frame(-1)); print(parent.frame())
x
}
t2 <- function(x) as.double(x)
a <- structure(pi, class = "foo")
t2(a)
a <- list(4)
a
c("myfunction",a)
a <- list(1,1,1)
unique(a)
length(unique(a))
a <- list(1,1,2)
unique(a)
length(unique(a))
evaluate_promise({
print("1")
message("2")
warning("3")
4
})
library(testthat)
evaluate_promise({
print("1")
message("2")
warning("3")
4
})
library(ds.client.connection.server)
library(ds.client.connection.server)
"NA"
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
library(ds.client.connection.server)
is.logical(12344)
?suppressMessages()
?as.symbol
an <- as.name("arrg")
an
library(ds.client.connection.server)
library(ds.client.connection.server)
?as.value
as.name
library(ds.client.connection.server)
?unique
